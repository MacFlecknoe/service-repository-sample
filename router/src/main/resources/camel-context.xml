<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:util="http://www.springframework.org/schema/util" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:camel="http://camel.apache.org/schema/spring"
		xmlns:camel-cxf="http://camel.apache.org/schema/cxf"
		xmlns:cxf="http://cxf.apache.org/core"
		xmlns:p="http://cxf.apache.org/policy"
		xmlns:wsp="http://www.w3.org/ns/ws-policy" 
		xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
		xmlns:wsa="http://cxf.apache.org/ws/addressing"
		xmlns:jaxws="http://cxf.apache.org/jaxws" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:soap="http://cxf.apache.org/bindings/soap"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
			http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
			http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
			http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
			http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
			http://www.w3.org/ns/ws-policy http://www.w3.org/2007/02/ws-policy.xsd">
	
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	
	<!-- spring property placeholder, ignore resource not found as the file resource is for environment configuration -->
	<context:property-placeholder location="classpath:user-service.properties,file:/etc/config/custom.properties"
		ignore-resource-not-found="true"/>

	<p:externalAttachment location="classpath:policy/authentication-policy.xml"/>
	<p:externalAttachment location="classpath:policy/i18n-policy.xml"/>
	<p:externalAttachment location="classpath:policy/addressing-policy.xml"/>
	<p:externalAttachment location="classpath:policy/x509-tokens-policy.xml"/>
	<p:externalAttachment location="classpath:policy/access-code-policy.xml"/>
	
	<cxf:bus>
		<cxf:features>
			<cxf:logging/>
			<wsa:addressing />
			<p:policies />
		</cxf:features>
	</cxf:bus>
	
	<!-- decorate with x509 token security -->
	<camel-cxf:cxfEndpoint id="x509UserService"
		address="/proxy/userService"
		endpointName="user:userSoapServicePort" serviceName="user:userSoapServicePorts"
		wsdlURL="classpath:/service/user-soap-v1.wsdl" xmlns:user="urn:healthmedia:wsdl:user:soap:v1">
		<camel-cxf:binding>
			<soap:soapBinding version="1.2" />
		</camel-cxf:binding>
		<camel-cxf:properties>
			<entry key="schema-validation-enabled" value="true" />
			<entry key="ws-security.ut.validator" value-ref="usernameValidator" />
			<entry key="ws-security.callback-handler" value-ref="keyStoreCallback" />
			<entry key="ws-security.signature.properties" value="classpath:server-keystore.properties" />
			<entry key="ws-security.encryption.username" value="server-alias" />
			<entry key="ws-security.signature.username" value="server-alias" />
	 	</camel-cxf:properties>
		<camel-cxf:inInterceptors>
			<ref bean="PicketBoxXacmlInterceptor"/>
		</camel-cxf:inInterceptors>
	</camel-cxf:cxfEndpoint>
	
	<bean class="com.healthmedia.ws.xaml.PicketBoxXacmlInterceptor" id="PicketBoxXacmlInterceptor">
		<constructor-arg>
			<list>
				<bean class="com.healthmedia.ws.accesscode.AccessCodeXacmlRequestAugmentor" />
				<bean class="com.healthmedia.ws.xaml.XacmlRequestContextAugmentor" />
			</list>
		</constructor-arg>
	</bean>
	
	<!-- decorate with username token security -->
	<camel-cxf:cxfEndpoint id="usernameTokenUserService"
		address="/proxy/alt/userService"
		endpointName="user:userSoapServicePort" serviceName="user:userSoapServicePorts"
		wsdlURL="classpath:/service/user-soap-v1.wsdl" xmlns:user="urn:healthmedia:wsdl:user:soap:v1">
		<camel-cxf:binding>
			<soap:soapBinding version="1.2" />
		</camel-cxf:binding>
		<camel-cxf:properties>
			<entry key="schema-validation-enabled" value="true" />
			<entry key="ws-security.ut.validator" value-ref="usernameValidator" />
			<entry key="ws-security.callback-handler" value-ref="keyStoreCallback" />
			<entry key="ws-security.signature.properties" value="classpath:server-keystore.properties" />
			<entry key="ws-security.encryption.username" value="server-alias" />
			<entry key="ws-security.signature.username" value="server-alias" />
	 	</camel-cxf:properties>
		<camel-cxf:inInterceptors>
			<ref bean="PicketBoxXacmlInterceptor"/>
		</camel-cxf:inInterceptors>
	</camel-cxf:cxfEndpoint>
	
	<camel-cxf:cxfEndpoint id="realUserService"
		address="${user-service.url}"
		endpointName="user:userSoapServicePort" serviceName="user:userSoapServicePorts"
		wsdlURL="classpath:/service/user-soap-v1.wsdl" xmlns:user="urn:healthmedia:wsdl:user:soap:v1" >
		<camel-cxf:binding>
			<soap:soapBinding version="1.2" />
		</camel-cxf:binding>
	</camel-cxf:cxfEndpoint>
	
	<bean id="xacmlProcessor" class="com.healthmedia.rs.processor.XacmlRestProcessor">
		<constructor-arg>
			<bean id="xacmlProcessor" class="com.healthmedia.ws.xaml.ClasspathConfigurableJBossPDP" />
		</constructor-arg>
	</bean>
	<bean id="usernameProcessor" class="com.healthmedia.rs.processor.MockUsernameProcessor" />
	
	<camel:camelContext>
	
		<camel:propertyPlaceholder id="properties" location="classpath:user-service.properties"/>
		
		<!-- SOAP route -->
		<camel:route>
			<!-- CXF consumer using PAYLOAD format -->
			<camel:from uri="cxf:bean:x509UserService?dataFormat=CXF_MESSAGE" />
			<camel:from uri="cxf:bean:usernameTokenUserService?dataFormat=CXF_MESSAGE" />
			<!-- log input received -->
			<camel:to uri="log:input" />
			<!-- send proxied request to real web service -->
			<camel:to uri="cxf:bean:realUserService?headerFilterStrategy=#removeSecurityHeadersFilterStrategy&amp;dataFormat=CXF_MESSAGE" />
			<!-- log answer from real web service -->
			<camel:to uri="log:output" />
		</camel:route>
		
		<!-- REST XACML route -->
		<camel:route>
			<camel:from uri="servlet:myapp?matchOnUriPrefix=true"/>
			<camel:to uri="direct:transformJsonNamespaceSeparatorOnRequest" />
			<camel:process ref="usernameProcessor"/>
			<!-- <camel:process ref="xacmlProcessor"/> -->
			<camel:to uri="http://localhost:8080/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"/>
			<camel:onException>
				<camel:exception>org.apache.camel.CamelAuthorizationException</camel:exception>
				<camel:handled>
					<camel:constant>true</camel:constant>
				</camel:handled>
			</camel:onException>
			<camel:to uri="direct:transformJsonNamespaceSeparatorOnResponse" />
		</camel:route>
		
		<!-- change the name-space parameter on the incoming request until we update jettison (replace custom package separator with dots)-->
		<camel:route>
			<camel:from uri="direct:transformJsonNamespaceSeparatorOnRequest"/>
			<camel:convertBodyTo type="java.lang.String"/>
			<camel:choice>
				<camel:when>
					<camel:groovy>request.body != null &amp;&amp; request.headers.get('Json-Namespace-Separator') != null</camel:groovy>
					<camel:transform>
						<camel:groovy>request.body.replaceAll('(\"[A-Za-z][\\w]+)\\Q' + request.headers.get('Json-Namespace-Separator').replace('\\','') + '\\E([\\w]+\"[\\s]*:)', '$1.$2')</camel:groovy>
					</camel:transform>
				</camel:when>
			</camel:choice>
		</camel:route>
		
		<!-- change the name-space parameter on the outgoing response until we update jettison (replace dot package separator with a custom string excluding the backslash escape character ('\')) -->
		<camel:route>
			<camel:from uri="direct:transformJsonNamespaceSeparatorOnResponse"/>
			<camel:convertBodyTo type="java.lang.String"/>
			<camel:choice>
				<camel:when>
					<camel:groovy>request.body != null &amp;&amp; request.headers.get('Json-Namespace-Separator') != null</camel:groovy> 
					<camel:transform>
						<camel:groovy>request.body.replaceAll('(\"[A-Za-z][\\w]+)\\.([\\w]+\"[\\s]*:)', '$1' + request.headers.get('Json-Namespace-Separator').replace('\\','').replace('$','\\$') + '$2')</camel:groovy>
					</camel:transform>
				</camel:when>
			</camel:choice>
		</camel:route>
		
	</camel:camelContext>
	
	<!-- looks up user from data store and validates the passed credentials -->
	<bean id="usernameValidator" class="com.healthmedia.ws.security.callback.MockTokenValidator" />
	<!-- x509 keystore lookup -->
	<bean id="keyStoreCallback" class="com.healthmedia.ws.security.callback.KeystorePasswordCallback" />

	<bean id="removeSecurityHeadersFilterStrategy" class="org.apache.camel.component.cxf.common.header.CxfHeaderFilterStrategy">
		<property name="messageHeaderFilters">
			<list>
				<bean class="com.healthmedia.ws.filter.WsSecurityHeaderFilter" />
			</list>
		</property>
	</bean>
</beans>
