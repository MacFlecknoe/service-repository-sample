<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:jaxrs="http://cxf.apache.org/jaxrs" 
	xmlns:cxf="http://cxf.apache.org/core" 
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd">
	
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	
	<jaxrs:server id="services" address="/">
		<jaxrs:serviceBeans>
			<ref bean="userDataServiceImpl" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="invalidQueryExceptionMapper"/>
			<ref bean="jaxbProvider"/>
			<ref bean="jsonProvider"/>
		</jaxrs:providers>
	</jaxrs:server>
	
	<bean id="userDataServiceImpl" class="com.healthmedia.ws.service.userdata.v1.UserDataServiceImpl" />
	
	<bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
		<property name="singleJaxbContext" value="true"/>
		<property name="useSingleContextForPackages" value="true"/>
		<property name="extraClass" ref="extraClasses" />
		<property name="jaxbElementClassMap" ref="myElementClassMap"/>
	</bean>
	
	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<property name="singleJaxbContext" value="true"/>
		<property name="useSingleContextForPackages" value="true"/>
		<property name="extraClass" ref="extraClasses" />
		<property name="jaxbElementClassMap" ref="myElementClassMap"/>
		<property name="ignoreNamespaces" value="true"/>
		<property name="dropRootElement" value="true"/>
		<property name="dropCollectionWrapperElement" value="true"/>
		<property name="attributesToElements" value="true"/>
		<!-- treat the elements listed in arrayKeys as part of a collection even if only a single node exists -->
		<property name="serializeAsArray" value="true"/>
		<property name="arrayKeys" ref="jsonKeys"/>
	</bean>

	<util:list id="jsonKeys">
		<value>text</value>
	</util:list>
	<!-- 
	jaxb doesnt annotate autogenerated classes derived from venetian blind schemas 
	with XmlRootElement. we therefore have to manually define their root names. 
	see http://hirenscafe.blogspot.com/2008/04/jaxbxmlrootelement.html
	-->
	<util:map id="myElementClassMap">
		<entry key="com.healthmedia.ws.entity.user.v1.UserDataType" value="userData"/>
		<entry key="com.healthmedia.ws.entity.user.v1.UserDataCollectionType" value="userDataCollection"/>
		<entry key="com.healthmedia.ws.common.error.v1.FaultType" value="fault"/>
	</util:map>
	
	<!-- include extra classes in jaxb context -->
	<util:list id="extraClasses">
		<value>com.healthmedia.ws.common.error.v1.InvalidQueryExceptionMapper$InvalidParameterType</value>
	</util:list>
	
	<!-- example exception mapping -->
	<bean id="invalidQueryExceptionMapper" class="com.healthmedia.ws.common.error.v1.InvalidQueryExceptionMapper" />
</beans>
